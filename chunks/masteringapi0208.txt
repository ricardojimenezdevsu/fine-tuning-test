Recommendations  Start by working on separating the deploy and release of existing software. This will help to enable an evolutionary architecture and a simplification of the existing system.  Feature flags are a good way of creating this separation. If the company hasn’t used feature flagging before, be sure that you review recommended practices and avoid pitfalls associated with flags.  Without careful consideration, feature flags have the potential to become a single point of failure.  Review the type of coupling between APIs in the architecture and decide the correct release strategy for the situation.      In the next section we will explore the different types of release strategies available.      Release Strategies   Once you have adequately separated deployment and release, you can now consider mechanisms for controlling the progressive release of features. It is important to choose a release strategy that allows you to reduce risk in production. Reduction in risk is achieved by performing a test or experiment with a small fraction of traffic and verifying the result. When the result is successful, the release to all traffic triggers. Certain strategies suit scenarios better than others and require varying degrees of additional services and infrastructure. Let’s explore a couple of options that are popular with API-based infrastructure.      Canary Releases   A canary release1 introduces a new version of the software and flows a small percentage of the traffic to the