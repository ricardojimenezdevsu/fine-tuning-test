reviewing relationships and helps in defining modular structures.  Defining modules within your applications is a good design step, though there are many options for how modularity is achieved. Look to use language-level support to help enforce modules and agree as a team on the approach that will work best for your technical stack.      Creating APIs as “Seams” for Extension   The concept of “seams” was first introduced in Michael Feather’s 2004 book Working Effectively with Legacy Code (Pearson). A seam is a point where functionality is stitched together—it can be considered as the point where one subject under consideration3 interacts with another. This is usually achieved by techniques like dependency injection, injecting the collaborator and executing against an interface allowing for substitutability. The substitutability consideration is important; this allows for effective testing without the requirement to run the whole system (e.g., using mocks or test doubles).  If the application was built without a good design, the definition of a seam may be complex and make it hard to understand the full range of behavior. When working with legacy code, it can make it difficult to break apart and refactor code to work in a more modular way. Nicolas Carlo presents a useful recipe for breaking apart seams of legacy code, assuming that tests do not already exist:  Identify change points (seams)    Break dependencies    Write the tests    Make your changes    Refactor      When