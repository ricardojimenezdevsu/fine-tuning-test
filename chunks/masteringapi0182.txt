without the need to perform a network hop to a sidecar proxy.7 As well as the conventional sidecar model, Cilium supports running a service mesh data plane using a single Envoy Proxy instance per node, reducing resource usage. Figure 4-9 shows how two services can communicate using Cilium and a single Envoy Proxy per node.      Figure 4-9. Using Cilium, eBPF, and a single Envoy Proxy per node to implement service mesh functionality      Service Mesh Taxonomy   Table 4-4 highlights the difference between the three service mesh implementation styles as discussed in the previous section.  Table 4-4. Comparison of library-, proxy-, and OS/kernel-based service meshes Use case Library-based (and “proxyless”) Sidecars, Proxy-based OS/kernel-based  Language/platform support  Single-language libraries, platform agnostic  Language agnostic, wide platform support  Language agnostic, OS-level support    Runtime mechanism  Packaged and run within the application  Run alongside application in a separate process  Run as part of the OS kernel, with full access to user and kernel space    Upgrading service mesh components  Requires rebuild and redeployment of entire application  Requires redeployment of sidecar components (can often be zero-downtime)  Requires kernel program update/patching    Observability  Complete insight into application and traffic, with ability to propagate context easily  Insight into traffic only, propagating context requires language support or shim  Insight into