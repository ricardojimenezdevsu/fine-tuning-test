to-end testing, then you need to have a run book of manual tests that you can use. This run book should be used against a testing environment before a production release. This type of manual testing will considerably slow down your production releases and ability to deliver value to customers.      Summary   In this chapter you have learned about the core types of testing for APIs, including what should be tested and where time should be dedicated. The key takeaways are:  Stick to the fundamentals of testing and make unit testing a core of your API.    Contract testing can help you develop a consistent API and test with other APIs.    Perform service tests on your component and isolate the integrations to validate incoming and outgoing traffic.    Use end-to-end tests to replicate core user journeys to help validate that your APIs all integrate correctly.    Use the ADR Guidelines as a way to work out if you should add different tests to your API.      While weâ€™ve given you lots of information, ideas, and techniques for testing your API, this is by no means an exhaustive list of tools available. We encourage you to do some research on testing frameworks and libraries that you may want to use, to ensure you are making an informed decision.  However, no matter how much testing is done upfront, nothing is as good as seeing how an application actually runs in production. You will learn more about testing in production in Chapter 5. The next chapter will focus on exposing and