Table 4-3. Differences between ingress and service-to-service properties Ingress (n/s) Service-to-service (e/w)  Traffic source  External (user, third-party, internet)  Internal (within trust boundary)    Traffic destination  Public or business-facing API, or website  Service or domain API    Authentication  “user” (real world entity) focused  “service” (machine entity) and “user” (real-world entity) focused    Authorization  “user” roles or capability level  “service” identity or network segment focused, and “user” roles or capability level    TLS  One-way, often enforced (e.g., protocol upgrade)  Mutual, can be made mandatory (strict mTLS)    Primary implementations  API gateway, reverse proxy  Service mesh, application libraries    Primary owner  Gateway/networking/ops team  Platform/cluster/ops team    Organizational users  Architects, API managers, developers  Developers      As illustrated, the properties and associated requirements for managing the two traffic types are often quite different. For example, handling external end-user traffic destined for a product API has fundamentally different requirements in comparison with handling internal service-to-service traffic destined for an internal business, domain, or component API. In practice this means that the control planes for both an API gateway and service mesh must offer different capabilities in order to support the configuration of the respective data planes. As an example in our case study, the Session service