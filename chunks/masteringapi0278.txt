API  GET – /conferences – Conference    POST – /conferences – Conference      This achieves the separation of conferences and attendees, however it is possible to take this a step further and differentiate between read and write operations:  Attendee API  GET – /attendees – AttendeeRead    GET – /attendees/{attendee_id} – AttendeeRead    POST – /attendees – AttendeeAccount    PUT – /attendees{attendee_id} – AttendeeAccount      Scopes don’t have a defined standard, however they are typically used as a coarse-grained separation within an API. Scopes must make sense to the end user, as they are going to need to consent to their usage. Once the resource owner grants authorization to a resource, this information needs to be used by the resource server to enforce this. When using access tokens in a JWT format, a claim is normally added to the JWT; e.g., "scope": "AttendeeRead AttendeeAccount.8 This will have the list of all the scopes that have been authorized. Scopes are not mandatory for OAuth2, though it is very useful and something that you should consider for coarse-grained authorization.      Authorization Enforcement   Authorization needs to be enforced as this is fundamental in API security. Two of the most common security authorization issues listed in the OWASP API Security Top 10 are Broken Object Level Authorization (BOLA) and Broken Function Level Authorization. BOLA is when a user is able to request information for an object that they should not have access to, often