we have provided an introduction to deploying and distributing software in an API architecture:  A valuable starting point is to understand the importance of separating deployment and release. In existing applications, feature flagging is one approach to configuring and enabling new features at a code level.    Traffic management provides a new opportunity to use the routing of traffic to model releases.    Major, minor, and patch releases help to separate the style of release options. Applications that have a tightly coupled API may use a different strategy.    You have reviewed the release strategies and the situations in which they apply, and you saw how tools like Argo can help to facilitate rollouts effectively.    Monitoring and metrics are an important measure of success in an API platform. You have reviewed why some metrics can be gotchas and could suggest a problem where there isnâ€™t one. You have learned a primer to observability and why applying these technologies is critical to successfully operating an API platform.    Finally, you explored application decisions to support effective rollouts and what platform owners may wish to consider when aiming for consistency across the plant.      Deploying and releasing APIs effectively is critical to a successful API-driven architecture. However, it is important to think about security threats API systems will face and consider how to effectively mitigate the risk. This is the focus of Chapter 6.      1 Named after