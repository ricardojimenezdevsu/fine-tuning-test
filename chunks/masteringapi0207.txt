that the specification is not backward compatible, the build should fail and prevent a breaking change from entering the architecture without a conscious override in place. The majority of releases against an API will be minor changes or patch changes where loose coupling is a primary concern for the producer and consumer.  If the consumer and producer are tightly coupled, owned by the same team, and always move together, API versioning and lifecycle will not be critical. In this situation it is important to consider a release strategy that allows the release of both components together and traffic is controlled at ingress. Typically blue-green models work well for this scenario, and we will review this further in “Release Strategies”.      ADR Guideline: Separating Release from Deployment with Traffic Management and Feature Flags   The ADR Guideline in Table 5-2 is helpful when considering how to create an ADR to separate release from deployment.  Table 5-2. ADR Guideline: Separating release from deployment with traffic management and feature flags guideline Decision  How do you go about separating release from deployment?    Discussion Points  Is it possible to separate deployment and release in the existing systems that are live today?  What is the degree of coupling between the consumer and producer in the system?  Do you have a build pipeline where it is possible to enforce the loose coupling requirements of traffic managed APIs, ensuring that compatibility is tested?