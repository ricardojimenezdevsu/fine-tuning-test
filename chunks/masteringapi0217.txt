capture. For example, a Java platform may choose to capture CPU utilization, current heap size, and garbage collection pause time (to name a few).    Logs are granular details of processing from a given component, and often the quality of logs is closely tied to the application or infrastructure component emitting them. Log format influences the utility of searching and processing of log data significantly, with structured logging facilitating a better search and retrieval of relevant data. In a distributed system, logs alone are usually not enough, and they are often better explored with the addition of context provided by traces and metrics.    Traces are essential when moving to a distributed architecture, enabling the tracking of each request through all the components interacted with in the architecture. For example, if a request fails, tracing will enable you to quickly locate the exact component in the architecture that is failing. Tracing works by adding a unique header as close to the origination of the request as possible; this header is propagated in all subsequent processing of a given request. If the context of the request moves over to a different type of infrastructure (e.g., a queue), the unique header will be recorded in the message envelope.      You can find a more detailed introduction in Distributed Systems Observability (O’Reilly) by Cindy Sridharan.      Warning   Implementing the three pillars across the platform is not enough. In “Reading the