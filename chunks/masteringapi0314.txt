all the way through to a complete rebuild or retiring of a system. They are:  Retain or Revisit    Rehost    Replatform    Repurchase    Refactor/Re-architect    Retire      Let’s examine AWS’s six Rs in more detail and explore how you can use this framework to evolve API infrastructure.      Retain or Revisit   This is the do nothing (for now) strategy. Although it can be tempting to discount this approach, many architects (us included) will suggest you “pick your battles,” and sometimes the battle of migrating an API is not worth the return on your effort. This decision should, of course, be based on a sound business and technical evaluation, and you should communicate the decision to not take action internally and externally as appropriate. This is where ADRs shine—in terms of providing the paper trail and rationale of these decisions for future reference.      Communicating Change and Deprecations   A business and technical evaluation of a current API or system may lead you to decide against evolving the system at the current time. In this situation, it’s still important to communicate any known dates by which action must be taken. For example, if a business unit is shutting down on a known date, or a system will reach end-of-life (EOL), or a key software or datastore license will expire at a known time, this should be communicated to consumers as a deprecation warning. You will most likely have a required deprecation notice baked into contracts and SLAs, and so be sure