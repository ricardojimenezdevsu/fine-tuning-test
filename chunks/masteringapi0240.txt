are used for validating HTTP requests.  It is worth mentioning that although input validation is valuable when conducted at the API gateway, it does not mean you can omit further input validation and sanitization within the backend services; trust, but verify!  An example of this for the Attendee service would be receiving the following POST request with this sample payload to create a user:   POST /attendees { "name": "Danny B", "age": 35, "profile": "Hax; DROP ALL TABLES; --" }  The OpenAPI Specification for the Attendee API defines that name should only accept letters, age accepts positive integers, and profile accepts letters, numbers, and special characters in the value (because it is for the user to write a little about themselves). The API gateway, which in this case is performing the input validation, will inspect the payload and only let it pass if the input validation is successful. Even if the input validation passes, the Attendee API should still sanitize the input to prevent an attack. The Attendee service would use prepared statements when communicating with the database. It is important to have multiple lines of defense in case one of them fails.      Mass assignment   Modifiable properties that are bound to database entities are vulnerable to being inappropriately changed. They can be exploited by the vulnerability known as mass assignment. This is an important case to consider, particularly if your underlying application uses the Active Record pattern9 or