servers can be used to verify that the consumer can communicate with the producer. The legacy conference system has a generated stub server and can use this to test against. This will keep testing local, and the stub server will be accurate. This is the preferred option for testing an external boundary.  However, a generated stub server from a contract is not always available and other options are required, as in the case of testing with an external API, such as the Microsoft Graph API, or within your organization when contracts are not used. The simplest one is to hand roll a stub server that mimics the requests and responses of the service you interact with. This is certainly a viable option, as in your chosen language and framework it is usually very easy for a developer to create a stub server with canned responses that integrate with tests.  The key considerations when hand rolling a stub server is to make sure that the stub is accurate. It can be very easy to make mistakes, such as inaccurately portraying the URL or making mistakes in the response property names and values. Can you see the errors in this handtyped response?12   { "values": [ { "id": 123456, "givenName": "James", "familyName": "Gough" }, { "id": 123457, "givenName": "Matthew", "familyNane": "Auburn" }, { "id": 123456, "givenName": "Daniel", "familyName": "Bryant" } ] }  This should still not put you off as this is a good solution. One of the authors had great success with this approach after a