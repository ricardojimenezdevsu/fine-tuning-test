and routing and also provide additional functionality. This includes transparent routing across clusters, enforcement of layer 3/4 and 7 security (such as user identity and authorization), layer 7 load balancing (which is useful if you are using multiplexed keepalive protocol like gRPC or HTTP/2), and observability at the service-to-service level and throughout the networking stack.      Why Use a Service Mesh?   In a similar fashion to deciding why you should deploy an API gateway into your existing architecture, determining why to adopt a service mesh is a multi-faceted topic. You need to balance both short-term implementation gains and costs against the long-term maintainability requirements. There are many API-related cross-cutting concerns that you might have for each or all of your internal services, including product lifecycle management (incrementally releasing new versions of a service), reliability, multilanguage communication support, observability, security, maintainability, and extensibility. A service mesh can help with all of these.  This section of the chapter will provide you with an overview of the key problems that a service mesh can address, such as:  Enable fine-grained control of service routing, reliability, and traffic management    Improve observability of interservice calls    Enforce security, including transport encryption, authentication, and authorization    Support cross-functional communication requirements across a variety of languages