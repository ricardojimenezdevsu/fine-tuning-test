of these three characteristics: a large number of users, inherent complexity in the design, or tight integration with a number of other systems. And here’s the kicker: these characteristics are almost inevitable within a software system that is well adopted, meets user needs, and is a key part of an organization’s workflow. The majority of “legacy” systems have also evolved in a somewhat ad hoc manner, with many temporary workarounds, quick fixes, or shortcuts becoming an embedded part of the system design.  As an architect, APIs can help you evolve a system. An API can be a boundary to a module or component, and this makes an API a natural point of leverage when trying to ensure a system is highly cohesive and loosely coupled.      Creating Useful Abstractions: Increasing Cohesion   Cohesion refers to the degree to which the elements inside a system belong together. Implementing APIs and systems with high cohesion enables the easier evolution of both the API provider and consumer. As a provider, you can alter the internals of your service, such as changing algorithms, refactoring code to improve performance, or changing datastores, and you only have to avoid modifying the external interface in a way that breaks backward compatibility. As a consumer, you can be more confident in modifying and scaling your service, with clear and understandable integration points into the existing API.  Closely related to designing cohesive APIs is thinking critically about the abstractions