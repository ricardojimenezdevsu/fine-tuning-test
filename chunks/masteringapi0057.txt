issue as field numbers are used to identify fields on the wire. The restrictions of encoding with gRPC mean the definition must be very specific. REST and OpenAPI are quite forgiving as the specification is only a guide.2 Extra fields and ordering do not matter in OpenAPI, and therefore versioning and compatibility is even more important when it comes to gRPC:   syntax = "proto3"; option java_multiple_files = true; package com.masteringapi.attendees.grpc.server; message AttendeesRequest { } message Attendee { int32 id = 1; string givenName = 2; string surname = 3; string email = 4; } message AttendeeResponse { repeated Attendee attendees = 1; } service AttendeesService { rpc getAttendees(AttendeesRequest) returns (AttendeeResponse); }  The following Java code demonstrates a simple structure for implementing the behavior on the generated gRPC server classes:   @GrpcService public class AttendeesServiceImpl extends AttendeesServiceGrpc.AttendeesServiceImplBase { @Override public void getAttendees(AttendeesRequest request, StreamObserver<AttendeeResponse> responseObserver) { AttendeeResponse.Builder responseBuilder = AttendeeResponse.newBuilder(); //populate response responseObserver.onNext(responseBuilder.build()); responseObserver.onCompleted(); } }  You can find the Java service modeling this example on this bookâ€™s GitHub page. gRPC cannot be queried directly from a browser without additional libraries, however you can install gRPC UI to use the browser for testing. grpcurl