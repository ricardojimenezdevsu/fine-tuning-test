conference entities. This could easily lead to a situation where a change in the code behind one API, such as the Attendee API, requires that another utility API also be updated. Unless you are the original author of the APIs, or you have very good documentation and tests, it could be easy to miss this and leave the system with inconsistent or incompatible behavior.      There Are Many Types of Cohesion to Consider!   Although cohesion often gets talked about as if this could be measured in one dimension, there are several types of cohesion that architects should be aware of. For example, systems can be coupled in a number of ways:  Functional cohesion    Sequential cohesion    Communicational cohesion    Procedural cohesion    Temporal cohesion    Logical cohesion    Coincidental cohesion      Joseph Ingeno’s Software Architect’s Handbook (Packt Publishing) provides a more comprehensive overview for readers who want to know more.      Of course, cohesion is only one property to strive for when designing and evolving systems. Let’s now look at cohesion’s close relation in software: coupling.      Clarifying Domain Boundaries: Promoting Loose Coupling   A loosely coupled system has two properties. First, components are weakly associated (have breakable relationships) with each other, which means that changes in one component do not affect the functionality or performance of another component. And second, each of the system’s components has little or no knowledge of the