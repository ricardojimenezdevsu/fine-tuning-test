Generated stub server and tests from a contract      Warning   It is tempting to use contracts for scenario tests. For example:  Step 1: add an attendee to a conference.  Step 2: get the list of attendees of the conference and check that the attendee was added correctly.    Frameworks do support this but also discourage it. Contracts are about defining interaction; if you wish to test this type of behavior, then use component tests.    A key benefit of using contracts is that once the producer agrees to implement a contract, this decouples the dependency of building the consumer and producer.      Tip   We have used generated stub servers to run demos for stakeholders. This was useful as the producer was still implementing the logic; however, they had agreed to the contracts.    The consumer has a stub server to develop against and the producer has tests to ensure that they are building the right interaction. The contract test process saves time, as when both the consumer and producer are deployed, they should integrate seamlessly.      Note   The generated tests need to be executed against your running API (producer). When your API launches, you should use test doubles for external dependencies. You do not want to be testing integrations with other services as part of your generated contract tests against the consumer.    To understand how contracts are agreed upon, letâ€™s look at the two main contract methodologies.      Producer contracts   Producer contract testing is when