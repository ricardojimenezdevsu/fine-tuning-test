additional parameters are needed: one for the authorization request, which is the code_challenge, and one for the access token request, which is the code_verifier. The code_verifier is a cryptographically random string generated by the client, and the code_challenge is the hashed value of the code_verifier. When the client application initiates the request to the authorization server, it sends the code_challenge, and when an access token is requested, the authorization code is presented along with the code_verifier. The authorization server can hash the code_verifier to check that it matches the code_challenge used to initiate the token request. This extension makes the grant more secure as only the original client should have the code_verifier; this prevents attacks where an authorization code could be intercepted and swapped for an access token. We can see this grant in action in Figure 7-7.  The authorization request is made and the code_verifier is sent to the authorization server. In the diagram t(code_verifier) is the transformation of the code_verifier to the code_challenge and t_m is the transformation method (as described previously, this is a hash).    Like in the Authorization Code Grant, an authorization code is returned.    The client requests the access token by sending the authorization request, which is the authorization code and the code_verifier. No client secret is sent as this is a public client.    The access token is then issued to the client