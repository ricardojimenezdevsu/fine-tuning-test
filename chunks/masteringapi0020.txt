queries and execute SQL against the database out of process. In the existing architecture, the database is an important component, potentially enforcing relationships—for example, constraints between bookings and sessions.      Figure I-3. C4 conference system component diagram      Now that we have drilled down to the appropriate level of detail, let’s revisit the types of API interactions in the case study at this point.      Types of APIs in the Conference Case Study   In Figure I-3 the Web Application to API Controller arrow is an out-of-process call, whereas the API Controller to Attendee Component arrow is an example of an in-process call. All interactions within the Conference Application boundary are examples of in-process calls. The in-process invocation is well defined and restricted by the programming language used to implement the Conference Application. The invocation is compile-time safe (the conditions under which the exchange mechanism are enforced at the time of writing code).      Reasons for Changing the Conference System   The current architectural approach has worked for the conference system for many years, however the conference owner has asked for three improvements, which are driving architectural change:  The conference organizers would like to build a mobile application.    The conference organizers plan to go global with their system, running tens of conferences instead of one per year. In order to facilitate this expansion, they would like to