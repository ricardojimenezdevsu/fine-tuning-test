client request. Letâ€™s explore some of the key principles that are important from an API perspective that you can use to both operate the plant and also inform your rollout strategies.      Monitoring for Success and Identifying Failure   Consider the legacy conference system case study in the Introduction and how you would go about investigating an issue in a single application. A single service has a single logfile to trace requests and processing by the application. There is only one application to look at for the overall health of the process on the server. Separating out multiple services, such as the Attendee service, results in an increase in operational complexity. The more hops between services introduces a potential for failure and manually finding what has gone wrong soon becomes difficult.      Three Pillars of Observability   API-driven architectures are decoupled and, without appropriate support, are complex to reason about and troubleshoot. Observability provides transparency into your system, providing a full understanding of what is happening at all times. Observability is best described by the three pillars, an operational minimum required to reason about distributed architecture:  Metrics are a measurement captured at regular intervals that represent an important element to the overall platform health. Metrics can be at different levels across the platform, and the freedom of structure means that a platform can determine what metrics are important to