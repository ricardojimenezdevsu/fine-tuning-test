testing.    Local Development  Deploy gateway locally (via installation script, Vagrant, or Docker), and attempt to mitigate infrastructure differences with production. Use language-specific gateway mocking and stubbing frameworks.  Deploy gateway locally via service orchestration platform (e.g., container, or Kubernetes).  Deploy service mesh locally via service orchestration platform (e.g., Kubernetes).    User Experience  Web-based administration UI, developer portal, and service catalog.  IaC or CLI-driven, with simple developer portal and service catalog.  IaC or CLI-driven, with limited service catalog.      Case Study: Evolving the Conference System Using an API Gateway   In this section of the chapter, you will learn how to install and configure an API gateway to route traffic directly to the Attendee service that has been extracted from the monolithic conference system. This will demonstrate how you can use the popular “strangler fig” pattern,4 which is covered in more detail under “Strangler Fig”, to evolve your system from a monolith to a microservices-based architecture over time by gradually extracting pieces of an existing system into independently deployable and runnable services. Figure 3-9 provides an overview of the conference system architecture with the addition of an API gateway.      Figure 3-9. Using an API gateway to route to a new Attendee service running independently from the monolith      Many organizations often start such a migration by