consent screen, which will state what the client is requesting access to do. For example, “Application would like to read appointments in your calendar” and “Application would like to book meetings in your calendar.” The end user is in control and can restrict what actions the client can perform on their behalf.      Case Study: Applying OAuth2 scopes to the Attendee API   Let’s explore a practical example to show scopes for modeling attendees using some endpoints. To help with this example, let’s imagine that the legacy conference system has two endpoints exposed as well:  Attendee API  GET – /attendees—Get a list of attendees    GET – /attendees/{attendee_id}—Get details of an attendee    POST – /attendees—Register a new attendee    PUT – /attendees/{attendee_id}—Update attendee information      Legacy Conference API  GET – /conferences—Get a list of conferences    POST – /conferences—Create a new conference      The External CFP application needs to only access the Attendee API, so as a resource owner you do not want the External CFP to access conference information. There should be a separation where you can authorize the External CFP system to just the Attendee API.  Two scopes are created: the Attendee scope and a Conference scope. This is shown as the HTTP Method – endpoint – scope.  Attendee API  GET – /attendees – Attendee    GET – /attendees/{attendee_id} – Attendee    POST – /attendees – Attendee    PUT – /attendees/{attendee_id – Attendee      Legacy Conference