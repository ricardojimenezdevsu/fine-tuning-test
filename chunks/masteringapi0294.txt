Functions   Although an initial promise of functions being the next evolution of microservices hasn’t quite come to fruition, there is good adoption of this architecture across a range of organizations. This architectural style can be a useful target to aim for if you have a highly event-driven system—for example, a market-based trading system that is highly reactive to news and market events, or an image-processing system with a pipeline of standardized transformations to apply and reports to be generated.  The biggest challenge with designing a function-based system and the corresponding APIs is typically related to getting coupling correct. It’s all too easy to design functions or services that are so simplistic that many of them have to be orchestrated together to provide any business value. These services and their APIs tend then to become highly coupled. The balance here between reusability and maintainability can be difficult, and therefore this architecture style should not be chosen without recognizing that you and your team may take some time to adjust to it.      Managing the Evolutionary Process   Evolving a system must be a consciously managed activity. Let’s look at the things you need to keep an eye on when making changes to your API.      Determine Your Goals   Before attempting to evolve a system, you should be clear about the motivation behind the changes. The goals should be catalogued and clearly communicated with your team and organization. Identifying