integrate with an external Call for Papers (CFP) system for managing speakers and their application to present sessions at the conference.    The conference organizers would like to decommission their private data center and instead run the conference system on a cloud platform with global reach.      Our goal is to migrate the conference system to be able to support the new requirements, without impacting the existing production system or rewriting everything in one go.      From Tiered Architecture to Modeling APIs   The starting point of the case study is a typical three-tier architecture, composed of a UI, a server-side processing tier, and a datastore. To begin to discuss an evolutionary architecture we need a model to think about the way API requests are processed by the components. We need a model/abstraction that will work for both the public cloud, virtual machines in a data center and a hybrid approach.  The abstraction of traffic will allow us to consider out-of-process interactions between an API consumer and an API service, sometimes referred to as the API producer. With architectural approaches like service-oriented architecture (SOA) and microservices-based architecture, the importance of modeling API interactions is critical. Learning about API traffic and the style of communication between components will be the difference between realizing the advantages of increased decoupling or creating a maintenance nightmare.      Warning   Traffic patterns are used by