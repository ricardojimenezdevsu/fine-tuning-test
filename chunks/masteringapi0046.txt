which could be useful in which to place more detailed stack traces/descriptions of issues. This would be incredibly helpful for debugging but must be stripped prior to an external consumer.    We have just scratched the surface on building REST APIs, but clearly there are many important decisions to be made when beginning to build an API. If we combine the desire to present intuitive APIs that are consistent and allow for an evolving and compatible API, it is worth adopting an API standard early.      ADR Guideline: Choosing an API Standard   To make your decision on API standards, the guideline in Table 1-2 lists important topics to consider. There are a range of guidelines to choose from, including the Microsoft guidelines discussed in this section, and finding one that best matches the styles of APIs being produced is a key decision.  Table 1-2. API Standards Guideline Decision  Which API standard should we adopt?    Discussion Points  Does the organization already have other standards within the company? Can we extend those standards to external consumers?  Are we using any third-party APIs that we will need to expose to a consumer (e.g., Identity Services) that already have a standard?  What does the impact of not having a standard look like for our consumers?    Recommendations  Pick an API standard that best matches the culture of the organization and formats of APIs you may already have in the inventory.  Be prepared to evolve and add to a standard any